//import the json file with Dinosaur facts
import dinoData from '../static/data/dino.json';

//import all the images
import brachiosaurusImage from '../static/images/brachiosaurus.png';
import anklyosaurusImage from '../static/images/anklyosaurus.png';
import elasmosaurusImage from '../static/images/elasmosaurus.png';
import humanImage from '../static/images/human.png';
import pigeonImage from '../static/images/pigeon.png';
import pteranodonImage from '../static/images/pteranodon.png';
import stegosaurusImage from '../static/images/stegosaurus.png';
import tracksImage from '../static/images/tracks.png';
import tyrannosaurusRexImage from '../static/images/tyrannosaurus-rex.png';
import triceratopsImage from '../static/images/triceratops.png';

//create an image object for easy access to the images
const imageObject = {
    brachiosaurus: brachiosaurusImage,
    anklyosaurus: anklyosaurusImage,
    elasmosaurus: elasmosaurusImage,
    human: humanImage,
    pigeon: pigeonImage,
    pteranodon: pteranodonImage,
    stegosaurus: stegosaurusImage,
    tracks: tracksImage,
    anklyosaurus: anklyosaurusImage,
    'tyrannosaurus rex': tyrannosaurusRexImage,
    triceratops: triceratopsImage, 
}

/**
 * On page load run the main code of the application 
 * @param {} event 
 */

window.onload = (event) => {

            //convert the dino json to Dino Objects
        //map the json dino array to an array of Dino objects
        const dinoArray = dinoData.Dinos.map(value => new Dino(
            value.species,
            value.weight,
            value.height,
            value.diet,
            value.where,
            value.when,
            value.fact
        ));

        

        //add an event listener to the submit button
        const submitButton = document.querySelector('#compareMe');
        submitButton.addEventListener('click', (event) => {

            event.preventDefault();
            
            /**
             * Revealing pattern to store the data from the form
             * Uses an IIFE to immediately return a object that has
             * access to the form data
             */
            const formData = (function(){

                //get form elements
                const nameInput = document.querySelector('#name');
                const heightInput = document.querySelector('#height');
                const weightInput = document.querySelector('#weight');
                const dietInput = document.querySelector('#diet');

                //get form data
                const name = nameInput.value;
                const heightInCm = parseInt(heightInput.value);
                const weightInKg = parseInt(weightInput.value);
                const diet = dietInput.value;

                //convert from metric (user input) to imperial (json Data)
                const height = cmToInches(heightInCm);
                const weight = kgToPounds(weightInKg);

                return {
                    name: name,
                    height: height,
                    weight: weight,
                    diet: diet
                }

            })();

            //using closure and an IIFE to maintain private scope of the variables in the generateBackgroundColor function
            const color = (generateBackgroundColor)();

            //generate human object and human tile object
            const human = new Human(formData.name, formData.height, formData.weight, formData.diet, imageObject.human);
            const humanTile = new Tile(human.name, human.image, "", color());

            //Create tiles to display on webpage using the dinosaur objects in the dinoArray
            const tileArray = dinoArray.map((dino) => {
                const randomFact = generateRandomFact(dino, human);
                return new Tile(dino.species, dino.image, randomFact, color());
            });

            //randomise the array and insert the human tile
            const randomisedTileArray = randomiseArray(tileArray);
            const finalArray = [...randomisedTileArray.slice(0,4), humanTile, ...randomisedTileArray.slice(4,8)];

            //Add tiles to the resultsSection of the webpage
            const resultSection = document.querySelector('#results-container');
            finalArray.forEach( (card) => {
                resultSection.insertAdjacentHTML('beforeend', card.generateHTML());
            });

            //display the results and hide the form
            toggleFormResults();           
        });

    }


/*
 * Generates a fact to be displayed on the tile for the dinosaur in the passed dinoObject.
 * Selects one fact randomly from an option of six facts. Three of these facts are already
 * stored in the dinoObject. The other three are generated by comparing the human Object 
 * data to the dinosaur data
 * @param {*} dinoObject - dinosaur object of which the facts are generated
 * @param {*} humanObject - used to create three of the six facts
 * @returns - The generated fact as a string
 */
function generateRandomFact(dinoObject, humanObject){

    //If the dinObject is representing a Pigeon than the specification states that only the defined
    //fact is to be returned
    if (dinoObject.species === 'Pigeon'){
        return dinoObject.fact;
    }

    //generate all facts strings and add them to the factArray
    //The first three facts are solely from the data in the dinoObject
    //The next three facts are calculated by comparing the human object data
    //to the dino object data
    const factArray = [
        `The ${dinoObject.species} lived in the ${dinoObject.when} period`,
        `The ${dinoObject.species} lived in the ${dinoObject.where} region`,
        `${dinoObject.fact}`,
        dinoObject.compareHeight(humanObject.height),
        dinoObject.compareWeight(humanObject.weight),
        dinoObject.compareDiet(humanObject.diet)
    ];

    //then pick a fact from that array at random
    //generate random number
    let randomNum = randonNumber(5); 

    //pick a random fact
    return factArray[randomNum];
}

/***
 * Constructor Function for Animal that both Dino and Human will inherit from 
 * @param {*} species - 
 * @param {*} height - in inches
 * @param {*} weight - in pounds
 * @param {*} diet - Herbavor or Carnivor
 */

function Animal(species, height, weight, diet){
    this.species = species;
    this.weight = weight;
    this.height = height;
    this.diet = diet;
    this.image = imageObject[species.toLowerCase()]; 
}

/***
 * Human constructor function that inherits from the Animal constructor functions
 * it sets species to Human and set its own name 
 */
function Human(name, height, weight, diet){
    Animal.call(this, "human", height, weight, diet);
    this.name = name;
}

//link Human into the prototype chain all of Animals methods are available to Human
Human.prototype = Object.create(Animal.prototype);

/***
 * Constructor function for the Dino object. It inherits from the Animal constructor function
 * and defines its own properties of where, when and fact
 */

function Dino(species, weight, height, diet, where, when, fact){
    Animal.call(this, species, height, weight, diet);
    this.where = where;
    this.when = when;
    this.fact = fact;
}

//link Dino prototype to animal prototype to inherit its methods
Dino.prototype = Object.create(Animal.prototype);

/**
 * Three methods to compare the dinosaur data of this object to the human objects data
 */

/*
    * Compare the height of the human in the human object to the dinosaur in the 
    * dinosaur object 
    * @param {*} humanHeight - in inches
    * @returns - A string that states the results of the comparsion between the human and 
    * dinosaurs height
    */
const compareHeight = function(humanHeight){

    const sizeDifference = this.height / humanHeight;
    let value = numberFormat(sizeDifference);

    //choose the sentence content based on the size difference
    if (sizeDifference > 1){
        return `${this.species} is ${value} times taller than you`;
    } else {
        return `${this.species} is ${(1/value).toFixed(1)} times smaller than you`;
    }
}

/*
    * Compare the weight of the human in the human object to the dinosaur in the 
    * dinosaur object 
    * @param {*} humanWeight - in pounds
    * @returns - A string that states the results of the comparsion between the human and 
    * dinosaurs weight
    */
const compareWeight = function(humanWeight){

    const sizeDifference = this.weight / humanWeight;
    let value = numberFormat(sizeDifference);

    //choose the sentence content based on the size difference
    if (sizeDifference > 1){
        return `${this.species} is ${value} times heavier than you`;
    } else {
        return `${this.species} is ${(1/value).toFixed(1)} times lighter than you`;
    }
}

/***
 * Compares the dinosaurs diet to the diet of the data in the human object
 */
const compareDiet = function(HumanDiet){
    if (HumanDiet == this.diet){
        return `${this.species} was a ${this.diet} like you!`
    } else {
        return `${this.species} has a different diet to you!`
    }
}

//add all three above methods to the prototype of Dino, so when a new instance of Dino is
//created it will have access to these methods
Dino.prototype.compareHeight = compareHeight;
Dino.prototype.compareWeight = compareWeight;
Dino.prototype.compareDiet = compareDiet; 


/*
 * Formats the passed number, if it is less than 5 then show it to one decimal place
 * if it is more than 5 then round to nearest integer 
 * @param {*} number 
 * @returns 
 */
function numberFormat(number){
    if (number > 5){
        return Math.round(number);
    } else {
        return number.toFixed(1);
    }
}

/***
 * Function constructor for a Tile. The Tile object will contain information in order to create
 * the display tile for a dinosaur or human
 */
function Tile(name, image, fact, backgroundColor){
    this.name = name;
    this.image = image;
    this.fact = fact;
    this.backgroundColor = backgroundColor;
}

//Add a method to the tile prototype to be available for all tile instances
Tile.prototype.generateHTML = function(){
        return `<div class="result-card shadow">
        <img src=${this.image} style="background-color: ${this.backgroundColor}" class="image-container"></img>
        <h3>${this.name}</h3>
        <div class="text-container">${this.fact}</div>
        </div>`;
    }

/***
 * Generate random Number
 */
function randonNumber(maxIndex){
    return Math.floor(Math.random() * (maxIndex)); 
}

/***
 * Randomise the order of an array and return a new randomised array
 */
function randomiseArray(anArray){
    
    const tempArray = [];
    let tempIndex = 0;

    while (anArray.length > 0){
        let i = randonNumber(anArray.length)
        tempArray[tempIndex] = anArray[i];
        anArray.splice(i, 1);
        tempIndex ++;
    }

    return tempArray;
}

/***
 * Returns a function that uses closure and scope to have access to the colorArray and index 
 * values. The generateBackgroundColor is invoked in an IIFE in code above this means that 
 * the index and colorArray will keep their state everytime they are invoked through the returned 
 * function
 */
function generateBackgroundColor(){

    const colorArray = ['#0A9A8C', '#DD7B5E', '#4FB4C2', '#F4BB67', '#BA456C','#8265B4', '#A1C479', '#6579C7', '#6BAA6A'];
    let index = 0;

    return function(){

        let colorReturn = colorArray[index];

        if (index === 8){
            index = 0
        } else {
            index ++;
        }

        return colorReturn;
    }
}


/***
 * Sets up an event listener for the rest button, when clicked the
 * html in the result section is removed and the form is displayed
 * and the results section is hidden
 */
document.querySelector('#reset').addEventListener('click', (event) => {
    //remove elements from the tiles from the previous results grid
    document.querySelector('#results-container').innerHTML = '';
    toggleFormResults();
});

/***
 * Toggle between displaying the results and not show the form, or display the form
 * and not showing the results
 */
function toggleFormResults(){
    //hide the form
    document.querySelector('#form-section').classList.toggle('display-hide');
    document.querySelector('#form-section').classList.toggle('display-show');
    
    //display the results section
    document.querySelector('#results-section').classList.toggle('display-hide');
    document.querySelector('#results-section').classList.toggle('display-show');
}

//helper functions

function cmToInches(size){
    return size / 2.54; 
}

function kgToPounds(size){
    return size * 2.205; 
}